// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: note.sql

package database

import (
	"context"
	"database/sql"
)

const createNote = `-- name: CreateNote :one
INSERT INTO notes (
    user_id,
    title,
    description
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, title, description, created_at, updated_at
`

type CreateNoteParams struct {
	UserID      string `json:"user_id"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, createNote, arg.UserID, arg.Title, arg.Description)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllNotes = `-- name: DeleteAllNotes :exec
DELETE FROM "notes"
`

func (q *Queries) DeleteAllNotes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllNotes)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM notes
WHERE id = $1
`

func (q *Queries) DeleteNote(ctx context.Context, id sql.NullInt32) error {
	_, err := q.db.ExecContext(ctx, deleteNote, id)
	return err
}

const getNote = `-- name: GetNote :one
SELECT id, user_id, title, description, created_at, updated_at FROM notes
WHERE user_id = $1 AND id = $2 LIMIT 1
`

type GetNoteParams struct {
	UserID string        `json:"user_id"`
	ID     sql.NullInt32 `json:"id"`
}

func (q *Queries) GetNote(ctx context.Context, arg GetNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, getNote, arg.UserID, arg.ID)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listNotes = `-- name: ListNotes :many
SELECT id, user_id, title, description, created_at, updated_at FROM notes
WHERE user_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListNotesParams struct {
	UserID string `json:"user_id"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListNotes(ctx context.Context, arg ListNotesParams) ([]Note, error) {
	rows, err := q.db.QueryContext(ctx, listNotes, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Note{}
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNote = `-- name: UpdateNote :one
UPDATE notes SET title = COALESCE($2, title),
description = COALESCE($3, description),
updated_at = now()
WHERE id = $1 RETURNING id, user_id, title, description, created_at, updated_at
`

type UpdateNoteParams struct {
	ID          sql.NullInt32 `json:"id"`
	Title       string        `json:"title"`
	Description string        `json:"description"`
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNote, arg.ID, arg.Title, arg.Description)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNoteDescription = `-- name: UpdateNoteDescription :one
UPDATE notes SET description = COALESCE($2, description),
updated_at = now()
WHERE id = $1 RETURNING id, user_id, title, description, created_at, updated_at
`

type UpdateNoteDescriptionParams struct {
	ID          sql.NullInt32 `json:"id"`
	Description string        `json:"description"`
}

func (q *Queries) UpdateNoteDescription(ctx context.Context, arg UpdateNoteDescriptionParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNoteDescription, arg.ID, arg.Description)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateNoteTitle = `-- name: UpdateNoteTitle :one
UPDATE notes SET title = COALESCE($2, title),
updated_at = now()
WHERE id = $1 RETURNING id, user_id, title, description, created_at, updated_at
`

type UpdateNoteTitleParams struct {
	ID    sql.NullInt32 `json:"id"`
	Title string        `json:"title"`
}

func (q *Queries) UpdateNoteTitle(ctx context.Context, arg UpdateNoteTitleParams) (Note, error) {
	row := q.db.QueryRowContext(ctx, updateNoteTitle, arg.ID, arg.Title)
	var i Note
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
